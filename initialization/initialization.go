package initialization

import (
	dg "github.com/bwmarrin/discordgo"

	"../commands"
	"../communication"
	"../configuration"
)

// Performs all initization for the program.
// If everything goes well then an open discordgo session is returned - IT HAS TO BE CLOSED BEFORE CLOSING THE PROGRAM.
// If any crucial part of initization fails then the returned session will be null and error will contain information about the error.
func Init() (*dg.Session, error) {

	// Perform the necessary initialization
	config, session, err := requiredInit()

	// If something went wrong, return the error
	if err != nil {
		return nil, err
	}

	return session, nil
}

// requiredInit performs crucial initialization tasks - loading config file and opening Discord session.
// If any of these fails then the program can't run.
// If everything went well the obtained Config and an opened discordgo session are returned, error in that case is nil.
// If something went wrong both config and session are nil and error contains information on what went wrong.
func requiredInit() (*config.Config, *dg.Session, error) {

	// Get the configuration file
	config, err := configuration.GetConfig()

	// If the config file couldn't be obtained, return nil (can't initialize) and the error generated by config file fetcher
	if err != nil {
		return nil, nil, err
	}

	// Open discord session
	session, err := communication.ConnectToDiscord(config.Token)

	// If the session couldn't be opened, return nil (can't initialize) and the generated error
	if err != nil {
		return nil, nil, err
	}

	return config, session, nil
}
